eZ Components Framework Research
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

by James Pic with the kind help of Derick Rethans

Introduction
============

No discussion was actively followed on the eZ Components mailing list, so this stands for my personnal beleifs.

There are differences between the framework and libraries:

- the framework defines application configuration, to make applications to play nice together in the scope of a project.
- the framework ties in loosely coupled libraries, to convert configuration for one lib into the configuration for another.

Part 0: application reusability
===============================

Application configuration
-------------------------

An application only needs two parameters:

- a path to the root dir,
- a namespace.

Application configuration details is encapsulated in aiiAppConfiguration, which extends ezcMvcDispatcherConfiguration.

In the purpose of allowing a user to value convention over configuration in early application development stages, aiiAppConfiguration does not
need to be defined for each application and is based on sensible defaults.

The difference between an application and a project is that a project encapsulates several applications, it's configuration class aiiProjectConfiguration
extends aiiAppConfiguration and has an additionnal property "apps" which is an array of aiiAppConfiguration instances.

Project configuration
---------------------

The project configuration class has a getComponentConfiguration() method which is may be used instead of hardcoding a component configuration.

Features
--------

Currently, the poc framework features:

- overloadable application layout conventions aiiAppConfiguration and the applications encapsulator aiiProjectConfiguration,
- aiiTemplateLocation which tries template paths from the most specific to the least specific (ie. project template path first then app template path),
- aiiProjectRouter which includes the routes from project apps after prefixing them with the app namespace,
- aiiProjectView which figures which app view is appropriate for the passed result,
- lazy configuration initializer for Template that loads all project apps extensions and sets up aiiTemplateLocation,
- lazy configuration initializer for PersistentObject that make all project apps persistent object definitions usable,
- a core app which provides a reverse routing template custom block,
- a dev app with scripts to make app development easier,

Part 1: component configuration conversion
==========================================

I think i'll make a trivial intermediary format (ie. property, properties encapsulator, constraints) and many factories and template blocks.

Appendix
========

Issues
------

Namespacing isn't actually avalaible upstream (http://issues.ez.no/IssueView.php?Id=15185)

The hack in app/core/template_extensions/route.php, Derick and I are trying to figure a trivial solution for this non trivial problem.

Links
-----

Django framework short review: http://blog.chocolatpistache.com/blog/2009/06/05/about-django-articles/
